{
  "metadata": {
    "name": "HeatConduction2DFin",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "//> module\n// Import FEAScript library\nimport { FEAScriptModel } from \"https://core.feascript.com/dist/feascript.esm.js\";\n\n// Create a new FEAScript model\nconst model = new FEAScriptModel();\n\n// Set solver configuration\nmodel.setSolverConfig(\"solidHeatTransferScript\");\n\n// Define mesh configuration\nmodel.setMeshConfig({\n  meshDimension: \"2D\",\n  elementOrder: \"quadratic\",\n  numElementsX: 8,\n  numElementsY: 4,\n  maxX: 4,\n  maxY: 2,\n});\n\n// Define boundary conditions\nmodel.addBoundaryCondition(\"0\", [\"constantTemp\", 200]);\nmodel.addBoundaryCondition(\"1\", [\"symmetry\"]);\nmodel.addBoundaryCondition(\"2\", [\"convection\", 1, 20]);\nmodel.addBoundaryCondition(\"3\", [\"constantTemp\", 200]);\n\n// Set solver method\nmodel.setSolverMethod(\"jacobi\");\n\n// Solve the problem and get the solution\nconst { solutionVector, nodesCoordinates } = model.solve();\n\n// Print results to console\nconsole.log(\"Node coordinates:\", nodesCoordinates);\nconsole.log(\"Solution vector:\", solutionVector);\n\n// Plot results using Plotly\n// Extract coordinates\nconst xCoords = nodesCoordinates.nodesXCoordinates;\nconst yCoords = nodesCoordinates.nodesYCoordinates;\n\n// Get unique sorted coordinate arrays\nconst uniqueX = [...new Set(xCoords)].sort((a, b) => a - b);\nconst uniqueY = [...new Set(yCoords)].sort((a, b) => a - b);\n\n// Create a 2D matrix for z values (temperature distribution)\nlet z = Array.from({ length: uniqueY.length }, () => new Array(uniqueX.length).fill(0));\n\n// Fill z matrix\nfor (let i = 0; i < xCoords.length; i++) {\n  const xi = uniqueX.indexOf(xCoords[i]);\n  const yi = uniqueY.indexOf(yCoords[i]);\n  z[yi][xi] = solutionVector[i]; \n}\n\n// Build Plotly data\nconst plotData = [{\n  z: z,\n  x: uniqueX,\n  y: uniqueY,\n  type: 'contour',\n  contours: {\n    coloring: 'heatmap'\n  },\n  colorbar: {\n    title: \"Temperature (Â°C)\"\n  }\n}];\n\n// Define layout\nconst layout = {\n  margin: { l: 40, r: 40, b: 40, t: 40, pad: 5 },\n  title: \"Temperature contour on the fin\",\n  xaxis: { title: \"X-axis\" },\n  yaxis: { title: \"Y-axis\" }\n};\n\n// Render plot\nscrib.currCell().style.height = '500px';\nPlotly.newPlot(scrib.currCell(), plotData, layout, { displayModeBar: false });",
      "status": "",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/nikoscham/FEAScript-Scribbler-examples",
  "run_on_load": false
}